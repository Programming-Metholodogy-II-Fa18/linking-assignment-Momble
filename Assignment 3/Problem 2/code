
public class BST<Key extends Comparable<Key>, Value> {
	private Node root;
	
	private class Node{
		private Key key;
		private Value val;
		private Node left, right;
		private int size;
		
		public Node(Key key, Value val, int size) {
			this.key = key;
			this.val = val;
			this.size = size;
		}
	}
	public BST() {
	}
	private int size(Node x) {
		if (x== null)
		{
			return 0;
		}
		else
		{
			return x.size;
		}
	}
	public int size() {
		return size(root);
	}
	public Value get(Key key) {
		Node x = root;
		while(x != null)
		{
			int cmp = key.compareTo(x.key);
			if (cmp < 0)
			{
				x= x.left;
			}
			else if (cmp >0)
			{
				x=x.right;
			}
			else if (cmp == 0)
			{
				return x.val;
			}
		}
		return null;
	}
	public void put(Key key, Value val) {
		root = put(root, key, val);
	}
	private Node put(Node x, Key key, Value val)
	{
		if (x == null)
		{
			return new Node(key, val);
		}
		int cmp = key.compareTo(x.key);
		if (cmp < 0)
		{
			x.left= put(x.left, key, val);
		}
		else if (cmp >0)
		{
			x.right = put(x.right, key, val);
		}
		else if (cmp == 0)
		{
			x.val = val;
		}
		return x;
		
	}
	
}
